const rules = {
	'@typescript-eslint/ban-types': 'off',
	'@typescript-eslint/camelcase': 'off',
	'@typescript-eslint/naming-convention': [
		'error',
		{
			selector: 'default',
			format: ['camelCase'],
			filter: {
				match: false
			}
		},
		{
			selector: 'enum',
			format: ['PascalCase', 'camelCase']
		},
	],
	'@typescript-eslint/explicit-member-accessibility': 'error',
	'@typescript-eslint/explicit-module-boundary-types': 'off',
	'@typescript-eslint/explicit-function-return-type': 'off',
	'@typescript-eslint/indent': 'off',
	'@typescript-eslint/interface-name-prefix': 'off',
	'@typescript-eslint/member-delimiter-style': 'error',
	'@typescript-eslint/member-ordering': 'error',
	'@typescript-eslint/no-empty-interface': 'off',
	'@typescript-eslint/no-explicit-any': 'off',
	'@typescript-eslint/no-inferrable-types': 'off',
	'@typescript-eslint/no-namespace': 'off',
	'@typescript-eslint/no-object-literal-type-assertion': 'off',
	'@typescript-eslint/no-this-alias': 'error',
	'@typescript-eslint/no-unused-vars': ['error', { varsIgnorePattern: '^_.*', argsIgnorePattern: '^_.*', caughtErrorsIgnorePattern: '^_.*' }],
	'@typescript-eslint/no-use-before-define': 'off',
	'@typescript-eslint/no-var-requires': 'off',
	'@typescript-eslint/prefer-interface': 'off',
	'@typescript-eslint/semi': 'error',
	'array-bracket-spacing': 'error',
	'arrow-spacing': 'error',
	'block-spacing': 'error',
	'brace-style': ['error', '1tbs', { allowSingleLine: true }],
	camelcase: 'off',
	'comma-spacing': 'error',
	'comma-style': 'error',
	'computed-property-spacing': 'error',
	curly: 'error',
	'dot-notation': 'error',
	'eol-last': ['error', 'always'],
	'implicit-arrow-linebreak': 'error',
	'import/no-absolute-path': 'error',
	'import/no-extraneous-dependencies': ['error', { packageDir: ['./', __dirname] }],
	'import/no-mutable-exports': 'error',
	'import/no-unresolved': 'off',
	'key-spacing': 'error',
	'keyword-spacing': 'error',
	'no-array-constructor': 'error',
	'no-duplicate-imports': ['error', { includeExports: true }],
	'no-empty': ['error', { allowEmptyCatch: true }],
	'no-eval': 'error',
	'no-fallthrough': ['error', { commentPattern: '.*' }],
	'no-loop-func': 'error',
	'no-multi-assign': 'error',
	'no-multiple-empty-lines': 'error',
	'no-nested-ternary': 'error',
	'no-new-func': 'error',
	'no-new-object': 'error',
	'no-new-wrappers': 'error',
	'no-prototype-builtins': 'off',
	'no-restricted-globals': ['error', 'isNaN', 'isFinite'],
	'no-trailing-spaces': 'error',
	'no-unneeded-ternary': 'error',
	'no-unused-expressions': ['error', { allowTernary: true }],
	'no-useless-catch': 'off',
	'no-useless-escape': 'off',
	'no-whitespace-before-property': 'error',
	'node/no-extraneous-require': 'off',
	'node/no-extraneous-import': 'off',
	'node/no-unpublished-import': 'off',
	'node/no-missing-import': 'off',
	'node/no-missing-require': ['off', { tryExtensions: ['.js', '.json', '.node', '.ts', '.d.ts'] }],
	'node/no-unpublished-require': 'off',
	'node/no-unsupported-features/es-builtins': ['error', { version: '>=12.0.0' }],
	'node/no-unsupported-features/es-syntax': 'off',
	'nonblock-statement-body-position': 'error',
	'one-var': ['error', 'never'],
	'one-var-declaration-per-line': ['error', 'always'],
	'operator-linebreak': ['error', 'before', { overrides: { '=': 'ignore' } }],
	'padded-blocks': ['error', 'never'],
	'prefer-arrow-callback': 'error',
	'prefer-const': 'error',
	'prefer-object-spread': 'error',
	'prefer-rest-params': 'error',
	'quote-props': ['error', 'as-needed', { keywords: true }],
	quotes: ['error', 'single', { avoidEscape: true, allowTemplateLiterals: true }],
	radix: 'error',
	'require-atomic-updates': 'off',
	semi: 'off',
	'space-before-blocks': 'error',
	'space-in-parens': 'error',
	'space-infix-ops': 'error',
	'template-curly-spacing': 'error'
};

module.exports = {
	env: {
		node: true,
		es6: true,
		jest: true,
		browser: true
	},
	plugins: ['@typescript-eslint', 'node'],
	'extends': [
		'eslint:recommended',
		'plugin:@typescript-eslint/recommended',
		'plugin:node/recommended',
		'plugin:import/errors',
	],
	parserOptions: {
		ecmaVersion: 2020,
		parser: '@typescript-eslint/parser',
		sourceType: 'module',
		extraFileExtensions: ['.vue'],
	},
	rules
};
